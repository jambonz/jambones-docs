{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Jambones API documentation jambones is an open source CPAAS project based on drachtio , rtpengine and freeswitch . The origin of the name is unclear, but is rumoured to either be an acronym for: just another mediocre boring object notational exercise in silliness , or a nod to an obscure 1980s-era Boston slang term: jambones [jam-b nz]: to move fast, with reckless abandon: Geraint Thomas was going jambones on that descent! Overview There are a lot of CPAAS providers on the market today, and they all provide a similar service: a set of easy-to-use APIs that customers can use to drive telephony applications. So.. How is jambones different and why do we need (yet another) CPAAS? How does jambones differ from other CPAAS solutions? jambones differs from other solutions because it is: a) an open source CPAAS: all the jambones core software is available under the permissive MIT License . b) a self-hosted solution: i.e., customers can run on their own infrastructure. c) a privacy-first solution: no sensitive customer information is held within the platform itself. Note: it can also be deployed in a multi-tenant configuration for use by service providers. Who should be interested? Those interested would include: customers that want to save costs vs a commercial CPAAS by using their own sip trunks rather than paying more expensive per-minute rates to a CPAAS provider. customers that need to achieve stringent data privacy requirements and wish to avoid exposing their customers' sensitive data to third parties. customers that want greater control and the ability to add features themselves to their CPAAS platform. enterprises with highly capable IT departments that are already managing most of what is required for a hosted telephony solution (e.g. cloud storage, speech APIs, infrastructure as code, etc). service providers that want a white-label product that they can to offer as a branded solution to their customers. What is a jambones application? A jambones application controls calls via web callbacks and an HTTP API. The jambones platform notifies applications of incoming calls and call status changes via web callbacks. An application can provide call control instructions by responding to web callbacks with JSON payloads that include instructions, or by invoking a REST API. Additionally, jambones supports sip end-user devices and webRTC clients interacting with the platform. Note that in keeping with the data privacy design goal, the platform does not store customers' sip credentials. Authentication of native sip clients is delegated to customer-side logic as described here . jambones data architecture jambones is designed to be deployed either by an end-user customer on their own behalf or by a service provider that hosts a jambones platform and provides service to multiple enterprises. The data model therefore distinguishes the following high-level data entities: platform owner - the entity that operates an instance of the jambones platform. service provider - an organization that provides service to one or more enterprises: a single instance of the platform may support multiple service providers. account - the credentials and information for a single enterprise that is using the platform for telephony service. application - a set of defined call control behaviors to apply to calls managed by an account. carrier - a VoIP carrier that provides call origination/termination services and DIDs (aka DDIs or telephone numbers) to customers. sip gateways - the signaling gateways for a carrier. calls - an instance of a phone call that is controlled via a jambones application. registered user - an authenticated sip client that belongs to an account. data element identifiers Instances of data model entities are publicly identified with a unique value known as a \"sid\". The documentation will therefore frequently refer to the following identifiers: Account Sid - identifies an account. Application Sid - identifies an application. Call Sid - identifies a specific call. Parent Call Sid - identifies the call that another call is bridged to. This is not an exhaustive list, since all data elements have a similar unique identifier (e.g. a service provider sid uniqely identifies a service provider, a carrier sid identifies a specific voip carrier, etc).","title":"Home"},{"location":"#welcome-to-jambones-api-documentation","text":"jambones is an open source CPAAS project based on drachtio , rtpengine and freeswitch . The origin of the name is unclear, but is rumoured to either be an acronym for: just another mediocre boring object notational exercise in silliness , or a nod to an obscure 1980s-era Boston slang term: jambones [jam-b nz]: to move fast, with reckless abandon: Geraint Thomas was going jambones on that descent!","title":"Welcome to Jambones API documentation"},{"location":"#overview","text":"There are a lot of CPAAS providers on the market today, and they all provide a similar service: a set of easy-to-use APIs that customers can use to drive telephony applications. So.. How is jambones different and why do we need (yet another) CPAAS?","title":"Overview"},{"location":"#how-does-jambones-differ-from-other-cpaas-solutions","text":"jambones differs from other solutions because it is: a) an open source CPAAS: all the jambones core software is available under the permissive MIT License . b) a self-hosted solution: i.e., customers can run on their own infrastructure. c) a privacy-first solution: no sensitive customer information is held within the platform itself. Note: it can also be deployed in a multi-tenant configuration for use by service providers.","title":"How does jambones differ from other CPAAS solutions?"},{"location":"#who-should-be-interested","text":"Those interested would include: customers that want to save costs vs a commercial CPAAS by using their own sip trunks rather than paying more expensive per-minute rates to a CPAAS provider. customers that need to achieve stringent data privacy requirements and wish to avoid exposing their customers' sensitive data to third parties. customers that want greater control and the ability to add features themselves to their CPAAS platform. enterprises with highly capable IT departments that are already managing most of what is required for a hosted telephony solution (e.g. cloud storage, speech APIs, infrastructure as code, etc). service providers that want a white-label product that they can to offer as a branded solution to their customers.","title":"Who should be interested?"},{"location":"#what-is-a-jambones-application","text":"A jambones application controls calls via web callbacks and an HTTP API. The jambones platform notifies applications of incoming calls and call status changes via web callbacks. An application can provide call control instructions by responding to web callbacks with JSON payloads that include instructions, or by invoking a REST API. Additionally, jambones supports sip end-user devices and webRTC clients interacting with the platform. Note that in keeping with the data privacy design goal, the platform does not store customers' sip credentials. Authentication of native sip clients is delegated to customer-side logic as described here .","title":"What is a jambones application?"},{"location":"#jambones-data-architecture","text":"jambones is designed to be deployed either by an end-user customer on their own behalf or by a service provider that hosts a jambones platform and provides service to multiple enterprises. The data model therefore distinguishes the following high-level data entities: platform owner - the entity that operates an instance of the jambones platform. service provider - an organization that provides service to one or more enterprises: a single instance of the platform may support multiple service providers. account - the credentials and information for a single enterprise that is using the platform for telephony service. application - a set of defined call control behaviors to apply to calls managed by an account. carrier - a VoIP carrier that provides call origination/termination services and DIDs (aka DDIs or telephone numbers) to customers. sip gateways - the signaling gateways for a carrier. calls - an instance of a phone call that is controlled via a jambones application. registered user - an authenticated sip client that belongs to an account.","title":"jambones data architecture"},{"location":"#data-element-identifiers","text":"Instances of data model entities are publicly identified with a unique value known as a \"sid\". The documentation will therefore frequently refer to the following identifiers: Account Sid - identifies an account. Application Sid - identifies an application. Call Sid - identifies a specific call. Parent Call Sid - identifies the call that another call is bridged to. This is not an exhaustive list, since all data elements have a similar unique identifier (e.g. a service provider sid uniqely identifies a service provider, a carrier sid identifies a specific voip carrier, etc).","title":"data element identifiers"},{"location":"jambones/","text":"Overview jambones is a specification for issuing call control commands via JSON messages. These messages are sent from your application to the jambones platform as instructions for the platform to carry out on specific calls or other resources. When an incoming call is received by the platform, jmabones makes an HTTP request to the URL endpoint you configured for that dialed number. Your response to that request contains a JSON payload instructing jambones on what to do next. An outbound call that is initiated by the REST API are controlled in the same way. When invoking the REST API to launch a call or create a resource, you provide a web callback to receive status on that request. In your response to that callback, you can provide a JSON payload instructing the platform on what to do next. \"dial\" The dial command is used to connect an existing call another call. This is a blocking call; it will reach a completion state when a connected call is ended by a hangup from either side, or the call attempt is rejected, times out trying to connect, or the caller hangs up during the outdial. dial : { action : http://example.com/outdial , from : 16173331212 , timeout : 60, headers : { User-Agent : my own cpaas , X-Client-ID : 12udih }, strategy : simring , target : [ { type : phone , number : 15083084809 }, { type : sip , uri : sip:1617333456@sip.trunk1.com , auth : { user : foo , password : bar } }, { type : user , name : spike } ] } As the example above illustrates, when you execute the 'dial' command you are making one or more outbound call attempts in an effort to create one new call, which is bridged to the original call. When you make multiple attempts, you can use either a 'sequential' strategy (one at a time, in order, until one answers), or a 'simring' strategy (blast outdial them all and accept the first one to answer, hanging up the others). Note: when using simring, if a dialed call returns early media (i.e. 183 Session Progress), then at that point all other calls will be canceled and only the call returning the early media will be allowed to complete. You also have three different types of destinations that you can dial: a telephone phone number, a sip endpoint, identified by a sip uri, or a webrtc or sip client that has registered directly with your application. You can use the following attributes in the dial command: option description required from caller id to use on the outbound call; when calling to a PSTN number it must be one of your jambones numbers yes, if calling to PSTN timeout ring no answer timeout no (default: 60 secs) action webhook to invoke when call ends no (default: current document url) headers an object containing arbitrary sip headers to apply to the outbound call attempt(s) no strategy \"simring\" or \"hunt\" no (default: \"hunt\" if multiple targets provided) target array of targeted endpoints yes transcribe a nested transcribe action, which will cause the call to be transcribed no listen a nested listen action, which will cause audio from the call to be streamed to a remote server over a websocket connection no target types PSTN number option description required type phone yes number E.164 number yes sip endpoint option description required type sip yes uri sip uri yes auth authentication credentials no auth.username sip username no auth.password sip password no Using this approach, it is possible to send calls out a sip trunk. If the sip trunking provider enforces username/password authentication, then supply the credentials in the auth property. a registered webrtc or sip user option description required type user yes name registered username yes Note that you do not need to specify the fully-qualified address of record (e.g. spike@myapp.myco.drachtio.org ); the domain is automatically applied to the name provided when searching active registrations. \"gather\" The gather command is used to collect dtmf or speech input. gather is a blocking command. gather : { input : dtmf , finishOnKey : # , numDigits : 5, timeout : 8, action : http://example.com/collect } You can use the following options in the gather command: option description required action web callback to invoke with collected digits or speech no (defaults to current document url) actionOnEmptyResult whether to invoke the callback when no input is detected no (default: false) finishOnKey dmtf key that signals the end of input no hints array of words or phrases to help speech detection no input type of input: 'dtmf', 'speech', or ['dtmf', 'speech'] no (default: dtmf) language language code to use for speech detection no (default: en-US) numDigits number of dtmf digits expected to gather no partialResultCallback url to send interim transcription results to (may not return content) no speechTimeout seconds to wait for a final speech transcription no \"hangup\" The hangup command terminates the call and ends the application. hangup : { headers : { X-Reason : maximum call length detected } } You can use the following options in the playback action: option description required headers an object containing SIP headers to include in the BYE request no \"listen\" The listen action is used to stream audio in real-time to a server over a websocket connection. The audio format will be linear 16-bit PCM encoding with a configurable sample rate. The websocket subprotocol name will be audio.jambones.org . The listen action is a non-blocking action. ( TBD: link for more detail on the protocol, json metadata etc ) A listen command can also be nested in a dial command, which allows the audio for the call to be streamed in real-time to a web service. listen : { action : http://example.com/listen , wsUrl : wss://myrecorder.example.com:4433 , mixType : stereo , sampleRate : 8000, metadata : { clientId : 12udih } } You can use the following options in the listen action: option description required action web callback to invoke with status of websocket connection no wsUrl url of remote server to connect to yes mixType \"mono\" (send single channel), \"stereo\" (send dual channel of both calls in a bridge), or \"mixed\" (send audio from both calls in a bridge in a single mixed audio stream) no (default: mono) sampleRate sample rate of audio to send (allowable values: 8000, 16000, 24000, 48000, or 64000 no (default: 8000) metadata arbitrary JSON payload to send to remote server when websocket connection is established no \"play\" The play command is used to stream recorded audio to a call. This is a non-blocking call. play : { url : https://example.com/example.mp3 , bargein : true, loop : 2 } You can use the following options in the playback action: option description required url a single url or array of urls (will play in sequence) to a wav or mp3 file yes bargein if true, terminate playback when a dtmf entry is detected no (default: false) loop number of times to play the url(s), or \"forever\" to loop indefinitely no (default: 1) \"redirect\" The redirect action is used to transfer control to another JSON document taht is retrieved from the specified url. All actions after redirect are unreachable and ignored. redirect : { url : https://example.com/?foo=bar } You can use the following options in the redirect action: option description required url url to retrieve document from yes \"sip:decline\" The sip:decline action is used to reject an incoming call with a specific status. This action must be the first and only action returned in the web callback for an incoming call, and the application must be configured to park incoming calls rather than automatically answer them. The sip:decline action is a non-blocking action and the session ends immediately after the action is executed. sip:decline : { status : 480, reason : Gone Fishing } You can use the following options in the sip:decline action: option description required status a valid SIP status code in the range 4XX - 6XX yes reason a brief description no (default: the well-known SIP reasons associated with the specified status code \"sip:notify\" The sip:notify action is used to a SIP NOTIFY request to one or more registered users. The sip:notify action is a non-blocking action. sip:notify : { user : [ spike ], contentType : application/simple-message-summary , content : [ Messages-Waiting: yes , Message-Account: sip:spike@sip.example.com , Voice-Message: 2/8 (0/2) ], headers : { Subscription-State : active } } You can use the following options in the sip:notify action: option description required user user, or array of users, to send NOTIFY requests to yes contentType value of SIP Content-Type header in NOTIFY yes content body of NOTIFY request yes headers object specifying arbitrary headers to apply to SIP NOTIFY request no \"sip:redirect\" The sip:redirect command is used to redirect an incoming call to another sip server or network. This must be the first and only command returned in the web callback for an incoming call. A SIP 302 Moved response will be sent back to the caller. The sip:redirect command is a non-blocking and the session ends immediately after the command is executed. sip:redirect : { sipUri : sip:123@gateway.example.com } You can use the following options in the sip:decline command: option description required sipUri a sip uri that will appear in the Contact header of the 302 response to the caller yes \"talk\" The talk command is used to send synthesized speech to the remote party. The text provided may be either plain text or may use SSML tags. This is a non-blocking action. A talk command can also be nested in a dial command, which allows the complete audio stream for the call to be streamed in real-time to a web service over websockets. talk : { text : hi there! , vendor : google , voice : en-AU-Wavenet-B , bargein : false } You can use the following options in the talk action: option description required text text to speak; may contain SSML tags yes vendor speech vendor to use no (default: google) voice name of voice to use; note this is vendor-dependent yes TBD: list of speech vendors supported (currently only google) list of google voices \"transcribe\" The transcribe command is used to send real time transcriptions of speech (either caller, called party, or both) to your web callback. This is a non-blocking command. When your web callback is invoked for a final transcription, it can optionally return a JSON document with further instructions; if provided, this will cause the current document to be flushed and execution to continue with the new document provided. A transcribe command can also be nested in a dial command, which allows a long-running transcription to be triggered for an outbound call. transcribe : { action : http://example.com/transcribe , language : en-US , target : both , interim : true, vendor : google } You can use the following options in the transcribe command: option description required action web callback to invoke with transcriptions yes language language to use for speech transcription yes target call uuid to perform transcription on, or \"both\" to transcribe both calls in a bridge no (default: original call) interim whether to send interim transcriptions no (default: false) vendor speech vendor to use no (default: google)","title":"jambones Call Control JSON"},{"location":"jambones/#overview","text":"jambones is a specification for issuing call control commands via JSON messages. These messages are sent from your application to the jambones platform as instructions for the platform to carry out on specific calls or other resources. When an incoming call is received by the platform, jmabones makes an HTTP request to the URL endpoint you configured for that dialed number. Your response to that request contains a JSON payload instructing jambones on what to do next. An outbound call that is initiated by the REST API are controlled in the same way. When invoking the REST API to launch a call or create a resource, you provide a web callback to receive status on that request. In your response to that callback, you can provide a JSON payload instructing the platform on what to do next.","title":"Overview"},{"location":"jambones/#dial","text":"The dial command is used to connect an existing call another call. This is a blocking call; it will reach a completion state when a connected call is ended by a hangup from either side, or the call attempt is rejected, times out trying to connect, or the caller hangs up during the outdial. dial : { action : http://example.com/outdial , from : 16173331212 , timeout : 60, headers : { User-Agent : my own cpaas , X-Client-ID : 12udih }, strategy : simring , target : [ { type : phone , number : 15083084809 }, { type : sip , uri : sip:1617333456@sip.trunk1.com , auth : { user : foo , password : bar } }, { type : user , name : spike } ] } As the example above illustrates, when you execute the 'dial' command you are making one or more outbound call attempts in an effort to create one new call, which is bridged to the original call. When you make multiple attempts, you can use either a 'sequential' strategy (one at a time, in order, until one answers), or a 'simring' strategy (blast outdial them all and accept the first one to answer, hanging up the others). Note: when using simring, if a dialed call returns early media (i.e. 183 Session Progress), then at that point all other calls will be canceled and only the call returning the early media will be allowed to complete. You also have three different types of destinations that you can dial: a telephone phone number, a sip endpoint, identified by a sip uri, or a webrtc or sip client that has registered directly with your application. You can use the following attributes in the dial command: option description required from caller id to use on the outbound call; when calling to a PSTN number it must be one of your jambones numbers yes, if calling to PSTN timeout ring no answer timeout no (default: 60 secs) action webhook to invoke when call ends no (default: current document url) headers an object containing arbitrary sip headers to apply to the outbound call attempt(s) no strategy \"simring\" or \"hunt\" no (default: \"hunt\" if multiple targets provided) target array of targeted endpoints yes transcribe a nested transcribe action, which will cause the call to be transcribed no listen a nested listen action, which will cause audio from the call to be streamed to a remote server over a websocket connection no","title":"\"dial\""},{"location":"jambones/#target-types","text":"PSTN number option description required type phone yes number E.164 number yes sip endpoint option description required type sip yes uri sip uri yes auth authentication credentials no auth.username sip username no auth.password sip password no Using this approach, it is possible to send calls out a sip trunk. If the sip trunking provider enforces username/password authentication, then supply the credentials in the auth property. a registered webrtc or sip user option description required type user yes name registered username yes Note that you do not need to specify the fully-qualified address of record (e.g. spike@myapp.myco.drachtio.org ); the domain is automatically applied to the name provided when searching active registrations.","title":"target types"},{"location":"jambones/#gather","text":"The gather command is used to collect dtmf or speech input. gather is a blocking command. gather : { input : dtmf , finishOnKey : # , numDigits : 5, timeout : 8, action : http://example.com/collect } You can use the following options in the gather command: option description required action web callback to invoke with collected digits or speech no (defaults to current document url) actionOnEmptyResult whether to invoke the callback when no input is detected no (default: false) finishOnKey dmtf key that signals the end of input no hints array of words or phrases to help speech detection no input type of input: 'dtmf', 'speech', or ['dtmf', 'speech'] no (default: dtmf) language language code to use for speech detection no (default: en-US) numDigits number of dtmf digits expected to gather no partialResultCallback url to send interim transcription results to (may not return content) no speechTimeout seconds to wait for a final speech transcription no","title":"\"gather\""},{"location":"jambones/#hangup","text":"The hangup command terminates the call and ends the application. hangup : { headers : { X-Reason : maximum call length detected } } You can use the following options in the playback action: option description required headers an object containing SIP headers to include in the BYE request no","title":"\"hangup\""},{"location":"jambones/#listen","text":"The listen action is used to stream audio in real-time to a server over a websocket connection. The audio format will be linear 16-bit PCM encoding with a configurable sample rate. The websocket subprotocol name will be audio.jambones.org . The listen action is a non-blocking action. ( TBD: link for more detail on the protocol, json metadata etc ) A listen command can also be nested in a dial command, which allows the audio for the call to be streamed in real-time to a web service. listen : { action : http://example.com/listen , wsUrl : wss://myrecorder.example.com:4433 , mixType : stereo , sampleRate : 8000, metadata : { clientId : 12udih } } You can use the following options in the listen action: option description required action web callback to invoke with status of websocket connection no wsUrl url of remote server to connect to yes mixType \"mono\" (send single channel), \"stereo\" (send dual channel of both calls in a bridge), or \"mixed\" (send audio from both calls in a bridge in a single mixed audio stream) no (default: mono) sampleRate sample rate of audio to send (allowable values: 8000, 16000, 24000, 48000, or 64000 no (default: 8000) metadata arbitrary JSON payload to send to remote server when websocket connection is established no","title":"\"listen\""},{"location":"jambones/#play","text":"The play command is used to stream recorded audio to a call. This is a non-blocking call. play : { url : https://example.com/example.mp3 , bargein : true, loop : 2 } You can use the following options in the playback action: option description required url a single url or array of urls (will play in sequence) to a wav or mp3 file yes bargein if true, terminate playback when a dtmf entry is detected no (default: false) loop number of times to play the url(s), or \"forever\" to loop indefinitely no (default: 1)","title":"\"play\""},{"location":"jambones/#redirect","text":"The redirect action is used to transfer control to another JSON document taht is retrieved from the specified url. All actions after redirect are unreachable and ignored. redirect : { url : https://example.com/?foo=bar } You can use the following options in the redirect action: option description required url url to retrieve document from yes","title":"\"redirect\""},{"location":"jambones/#sipdecline","text":"The sip:decline action is used to reject an incoming call with a specific status. This action must be the first and only action returned in the web callback for an incoming call, and the application must be configured to park incoming calls rather than automatically answer them. The sip:decline action is a non-blocking action and the session ends immediately after the action is executed. sip:decline : { status : 480, reason : Gone Fishing } You can use the following options in the sip:decline action: option description required status a valid SIP status code in the range 4XX - 6XX yes reason a brief description no (default: the well-known SIP reasons associated with the specified status code","title":"\"sip:decline\""},{"location":"jambones/#sipnotify","text":"The sip:notify action is used to a SIP NOTIFY request to one or more registered users. The sip:notify action is a non-blocking action. sip:notify : { user : [ spike ], contentType : application/simple-message-summary , content : [ Messages-Waiting: yes , Message-Account: sip:spike@sip.example.com , Voice-Message: 2/8 (0/2) ], headers : { Subscription-State : active } } You can use the following options in the sip:notify action: option description required user user, or array of users, to send NOTIFY requests to yes contentType value of SIP Content-Type header in NOTIFY yes content body of NOTIFY request yes headers object specifying arbitrary headers to apply to SIP NOTIFY request no","title":"\"sip:notify\""},{"location":"jambones/#sipredirect","text":"The sip:redirect command is used to redirect an incoming call to another sip server or network. This must be the first and only command returned in the web callback for an incoming call. A SIP 302 Moved response will be sent back to the caller. The sip:redirect command is a non-blocking and the session ends immediately after the command is executed. sip:redirect : { sipUri : sip:123@gateway.example.com } You can use the following options in the sip:decline command: option description required sipUri a sip uri that will appear in the Contact header of the 302 response to the caller yes","title":"\"sip:redirect\""},{"location":"jambones/#talk","text":"The talk command is used to send synthesized speech to the remote party. The text provided may be either plain text or may use SSML tags. This is a non-blocking action. A talk command can also be nested in a dial command, which allows the complete audio stream for the call to be streamed in real-time to a web service over websockets. talk : { text : hi there! , vendor : google , voice : en-AU-Wavenet-B , bargein : false } You can use the following options in the talk action: option description required text text to speak; may contain SSML tags yes vendor speech vendor to use no (default: google) voice name of voice to use; note this is vendor-dependent yes TBD: list of speech vendors supported (currently only google) list of google voices","title":"\"talk\""},{"location":"jambones/#transcribe","text":"The transcribe command is used to send real time transcriptions of speech (either caller, called party, or both) to your web callback. This is a non-blocking command. When your web callback is invoked for a final transcription, it can optionally return a JSON document with further instructions; if provided, this will cause the current document to be flushed and execution to continue with the new document provided. A transcribe command can also be nested in a dial command, which allows a long-running transcription to be triggered for an outbound call. transcribe : { action : http://example.com/transcribe , language : en-US , target : both , interim : true, vendor : google } You can use the following options in the transcribe command: option description required action web callback to invoke with transcriptions yes language language to use for speech transcription yes target call uuid to perform transcription on, or \"both\" to transcribe both calls in a bridge no (default: original call) interim whether to send interim transcriptions no (default: false) vendor speech vendor to use no (default: google)","title":"\"transcribe\""},{"location":"register-hook/","text":"Overview The platform allows sip clients to register, make and receive calls. Managing sip registrations is a shared activity between the platform and the customer application. The platform handles the sip messaging aspects, but the determination of whether to authenticate a specific request is the responsibility of the application, which is notified of incoming REGISTER requests by means of the registration webhook. This is designed so the privacy of sip credentials issued by a customer to their clients is assured; i.e. those credentials are never exposed to the platform provider entity, nor stored anywhere in the platform itself . When the platform receives an incoming sip register request, the registering sip domain is first checked to see if there is a register webhook provisioned for the that domain. If there is no webhook provisioned for that domain, a 403 Forbidden response is sent back to the client. Otherwise, the platform will challenge the REGISTER request with a 401 Unauthorized response containing a digest challenge. If the sip client then sends a REGISTER request with an Authorization header, the platform generates an http POST request to the registered webhook. The Content-Type of the POST is application/json and the body contains the following elements, as provided in the Authorization sip header of the incoming REGISTER request. { method : REGISTER , realm : example.com , username : foo , expires : 3600, nonce : InFriVGWVoKeCckYrTx7wg== , uri : sip:example.com , algorithm : MD5 , qop : auth , cnonce : 03d8d2aafd5a975f2b07dc90fe5f4100 , nc : 00000001 , response : db7b7dbec7edc0c427c1708031f67cc6 } The application, with knowledge of the password associated with the provided username and password, then performs digest authentication to authenticate the request using the information provided, including the calculated response value. Regardless of whether the request is authenticated or not, the application should respond with a 200 OK to the http POST and with a JSON body. The JSON body in the response if the request is authenticated should simply contain a status attribute with a value of ok , e.g.: { status : ok } If the application wishes to enforce a shorter expires value, it may include that value in the response, e.g.: { status : ok , expires : 1800 } The JSON body in the response if the request is not authentication should contain a status of fail , and optionally a msg attribute, e.g. { status : fail , msg : invalid password }","title":"Authenticating sip clients"},{"location":"register-hook/#overview","text":"The platform allows sip clients to register, make and receive calls. Managing sip registrations is a shared activity between the platform and the customer application. The platform handles the sip messaging aspects, but the determination of whether to authenticate a specific request is the responsibility of the application, which is notified of incoming REGISTER requests by means of the registration webhook. This is designed so the privacy of sip credentials issued by a customer to their clients is assured; i.e. those credentials are never exposed to the platform provider entity, nor stored anywhere in the platform itself . When the platform receives an incoming sip register request, the registering sip domain is first checked to see if there is a register webhook provisioned for the that domain. If there is no webhook provisioned for that domain, a 403 Forbidden response is sent back to the client. Otherwise, the platform will challenge the REGISTER request with a 401 Unauthorized response containing a digest challenge. If the sip client then sends a REGISTER request with an Authorization header, the platform generates an http POST request to the registered webhook. The Content-Type of the POST is application/json and the body contains the following elements, as provided in the Authorization sip header of the incoming REGISTER request. { method : REGISTER , realm : example.com , username : foo , expires : 3600, nonce : InFriVGWVoKeCckYrTx7wg== , uri : sip:example.com , algorithm : MD5 , qop : auth , cnonce : 03d8d2aafd5a975f2b07dc90fe5f4100 , nc : 00000001 , response : db7b7dbec7edc0c427c1708031f67cc6 } The application, with knowledge of the password associated with the provided username and password, then performs digest authentication to authenticate the request using the information provided, including the calculated response value. Regardless of whether the request is authenticated or not, the application should respond with a 200 OK to the http POST and with a JSON body. The JSON body in the response if the request is authenticated should simply contain a status attribute with a value of ok , e.g.: { status : ok } If the application wishes to enforce a shorter expires value, it may include that value in the response, e.g.: { status : ok , expires : 1800 } The JSON body in the response if the request is not authentication should contain a status of fail , and optionally a msg attribute, e.g. { status : fail , msg : invalid password }","title":"Overview"},{"location":"rest/","text":"Overview The jambones REST API allows applications to query, create, and manage calls and other resources. Base URL All calls should use the following base URL: https:// domain /api/jambones/v1 where domain is set according to your installation. Authentication The REST api requires that you implement basic authentication by including an HTTP Authorization header in all requests, consisting of the application uuid concatenated to a valid api token for that application, separated by a colon (:). Dates and Times All dates and times are UTC, using RFC 2822 format. Phone Numbers All phone numbers are in E.164 format, starting with a plus sign (\"+\") and the country code. Applications An application represents a set of unified behaviors to be applied to phone calls either made or received through the platform. Applications can be created, queried, updated, and destroyed via the API. API Key An api key is a token that is associated with an application and is used to authenticate requests on behalf of that application. Api keys can be created and destroyed via the API. When created, they are associated to one and only one application. Calls A call is a voice connection made between the jambones platform and another endpoint, which may be a phone or a sip endpoint. Inbound calls are those made from external numbers or devices towards the platform, while outbound calls are placed by the platform to an endpoint. Inbound calls quite often are used to trigger outbound calls and in such a situation the outbound call will have a parent call uuid attribute that references the inbound call. Calls may created, modified, and deleted through the API. Conference participants Conference participants refer to calls that are actively connected to a conference. You can mute or remove participants from a conference as well as retrieve a list of all participants, along with detailed information about each participant, in an active conference. Conferences Conferences represent a common endpoint that can mix the audio from multiple calls. Conferences can be created, modified and deleted through the API. Phone numbers Phone numbers represent phone numbers that route to the jambones platform, and may be associated with an application. A Phone number may be associated with zero or one Application. Phone numbers can be created and destroyed through the API, as well as being modified to point to a different application. Queues Queues represent an ordered collection of active calls that are parked (not connected to a far end). Queues may be created and deleted through the API. Queued calls Queued calls are calls that have been assigned to a queue.","title":"REST API"},{"location":"rest/#overview","text":"The jambones REST API allows applications to query, create, and manage calls and other resources. Base URL All calls should use the following base URL: https:// domain /api/jambones/v1 where domain is set according to your installation. Authentication The REST api requires that you implement basic authentication by including an HTTP Authorization header in all requests, consisting of the application uuid concatenated to a valid api token for that application, separated by a colon (:). Dates and Times All dates and times are UTC, using RFC 2822 format. Phone Numbers All phone numbers are in E.164 format, starting with a plus sign (\"+\") and the country code.","title":"Overview"},{"location":"rest/#applications","text":"An application represents a set of unified behaviors to be applied to phone calls either made or received through the platform. Applications can be created, queried, updated, and destroyed via the API.","title":"Applications"},{"location":"rest/#api-key","text":"An api key is a token that is associated with an application and is used to authenticate requests on behalf of that application. Api keys can be created and destroyed via the API. When created, they are associated to one and only one application.","title":"API Key"},{"location":"rest/#calls","text":"A call is a voice connection made between the jambones platform and another endpoint, which may be a phone or a sip endpoint. Inbound calls are those made from external numbers or devices towards the platform, while outbound calls are placed by the platform to an endpoint. Inbound calls quite often are used to trigger outbound calls and in such a situation the outbound call will have a parent call uuid attribute that references the inbound call. Calls may created, modified, and deleted through the API.","title":"Calls"},{"location":"rest/#conference-participants","text":"Conference participants refer to calls that are actively connected to a conference. You can mute or remove participants from a conference as well as retrieve a list of all participants, along with detailed information about each participant, in an active conference.","title":"Conference participants"},{"location":"rest/#conferences","text":"Conferences represent a common endpoint that can mix the audio from multiple calls. Conferences can be created, modified and deleted through the API.","title":"Conferences"},{"location":"rest/#phone-numbers","text":"Phone numbers represent phone numbers that route to the jambones platform, and may be associated with an application. A Phone number may be associated with zero or one Application. Phone numbers can be created and destroyed through the API, as well as being modified to point to a different application.","title":"Phone numbers"},{"location":"rest/#queues","text":"Queues represent an ordered collection of active calls that are parked (not connected to a far end). Queues may be created and deleted through the API.","title":"Queues"},{"location":"rest/#queued-calls","text":"Queued calls are calls that have been assigned to a queue.","title":"Queued calls"}]}